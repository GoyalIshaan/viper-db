// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: viperdb.proto
#ifndef GRPC_viperdb_2eproto__INCLUDED
#define GRPC_viperdb_2eproto__INCLUDED

#include "viperdb.pb.h"


#include <grpcpp/grpcpp.h>
#include <grpcpp/server.h>
#include <grpcpp/server_builder.h>
#include <grpcpp/server_context.h>

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

// message DeleteVectorResponse {
//     bool success = 1;
// }
//
// message UpdateVectorResponse {
//     bool success = 1;
// }
//
// message PollVectorResponse {
//     string id = 1;
//     CurrentPhase current_phase = 2;
// }
//
// enum CurrentPhase {
//     WAITING = 0;
//     PROCESSING = 1;
//     STORED = 2;
//     FAILED = 3;
// }
//
class ViperDB final {
 public:
  static constexpr char const* service_full_name() {
    return "ViperDB";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateVector(::grpc::ClientContext* context, const ::CreateVectorRequest& request, ::CreateVectorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateVectorResponse>> AsyncCreateVector(::grpc::ClientContext* context, const ::CreateVectorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateVectorResponse>>(AsyncCreateVectorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateVectorResponse>> PrepareAsyncCreateVector(::grpc::ClientContext* context, const ::CreateVectorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateVectorResponse>>(PrepareAsyncCreateVectorRaw(context, request, cq));
    }
    virtual ::grpc::Status SearchVector(::grpc::ClientContext* context, const ::SearchVectorRequest& request, ::SearchVectorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SearchVectorResponse>> AsyncSearchVector(::grpc::ClientContext* context, const ::SearchVectorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SearchVectorResponse>>(AsyncSearchVectorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SearchVectorResponse>> PrepareAsyncSearchVector(::grpc::ClientContext* context, const ::SearchVectorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SearchVectorResponse>>(PrepareAsyncSearchVectorRaw(context, request, cq));
    }
    // rpc DeleteVector(DeleteVectorRequest) returns (DeleteVectorResponse);
    // rpc UpdateVector(UpdateVectorRequest) returns (UpdateVectorResponse);
    // rpc PollVector(PollVectorRequest) returns (PollVectorResponse);
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateVector(::grpc::ClientContext* context, const ::CreateVectorRequest* request, ::CreateVectorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateVector(::grpc::ClientContext* context, const ::CreateVectorRequest* request, ::CreateVectorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SearchVector(::grpc::ClientContext* context, const ::SearchVectorRequest* request, ::SearchVectorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchVector(::grpc::ClientContext* context, const ::SearchVectorRequest* request, ::SearchVectorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // rpc DeleteVector(DeleteVectorRequest) returns (DeleteVectorResponse);
      // rpc UpdateVector(UpdateVectorRequest) returns (UpdateVectorResponse);
      // rpc PollVector(PollVectorRequest) returns (PollVectorResponse);
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreateVectorResponse>* AsyncCreateVectorRaw(::grpc::ClientContext* context, const ::CreateVectorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreateVectorResponse>* PrepareAsyncCreateVectorRaw(::grpc::ClientContext* context, const ::CreateVectorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SearchVectorResponse>* AsyncSearchVectorRaw(::grpc::ClientContext* context, const ::SearchVectorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SearchVectorResponse>* PrepareAsyncSearchVectorRaw(::grpc::ClientContext* context, const ::SearchVectorRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateVector(::grpc::ClientContext* context, const ::CreateVectorRequest& request, ::CreateVectorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateVectorResponse>> AsyncCreateVector(::grpc::ClientContext* context, const ::CreateVectorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateVectorResponse>>(AsyncCreateVectorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateVectorResponse>> PrepareAsyncCreateVector(::grpc::ClientContext* context, const ::CreateVectorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateVectorResponse>>(PrepareAsyncCreateVectorRaw(context, request, cq));
    }
    ::grpc::Status SearchVector(::grpc::ClientContext* context, const ::SearchVectorRequest& request, ::SearchVectorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SearchVectorResponse>> AsyncSearchVector(::grpc::ClientContext* context, const ::SearchVectorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SearchVectorResponse>>(AsyncSearchVectorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SearchVectorResponse>> PrepareAsyncSearchVector(::grpc::ClientContext* context, const ::SearchVectorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SearchVectorResponse>>(PrepareAsyncSearchVectorRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateVector(::grpc::ClientContext* context, const ::CreateVectorRequest* request, ::CreateVectorResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateVector(::grpc::ClientContext* context, const ::CreateVectorRequest* request, ::CreateVectorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SearchVector(::grpc::ClientContext* context, const ::SearchVectorRequest* request, ::SearchVectorResponse* response, std::function<void(::grpc::Status)>) override;
      void SearchVector(::grpc::ClientContext* context, const ::SearchVectorRequest* request, ::SearchVectorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::CreateVectorResponse>* AsyncCreateVectorRaw(::grpc::ClientContext* context, const ::CreateVectorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CreateVectorResponse>* PrepareAsyncCreateVectorRaw(::grpc::ClientContext* context, const ::CreateVectorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SearchVectorResponse>* AsyncSearchVectorRaw(::grpc::ClientContext* context, const ::SearchVectorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SearchVectorResponse>* PrepareAsyncSearchVectorRaw(::grpc::ClientContext* context, const ::SearchVectorRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateVector_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchVector_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateVector(::grpc::ServerContext* context, const ::CreateVectorRequest* request, ::CreateVectorResponse* response);
    virtual ::grpc::Status SearchVector(::grpc::ServerContext* context, const ::SearchVectorRequest* request, ::SearchVectorResponse* response);
    // rpc DeleteVector(DeleteVectorRequest) returns (DeleteVectorResponse);
    // rpc UpdateVector(UpdateVectorRequest) returns (UpdateVectorResponse);
    // rpc PollVector(PollVectorRequest) returns (PollVectorResponse);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateVector() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVector(::grpc::ServerContext* /*context*/, const ::CreateVectorRequest* /*request*/, ::CreateVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateVector(::grpc::ServerContext* context, ::CreateVectorRequest* request, ::grpc::ServerAsyncResponseWriter< ::CreateVectorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchVector() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SearchVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchVector(::grpc::ServerContext* /*context*/, const ::SearchVectorRequest* /*request*/, ::SearchVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchVector(::grpc::ServerContext* context, ::SearchVectorRequest* request, ::grpc::ServerAsyncResponseWriter< ::SearchVectorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateVector<WithAsyncMethod_SearchVector<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateVector() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::CreateVectorRequest, ::CreateVectorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::CreateVectorRequest* request, ::CreateVectorResponse* response) { return this->CreateVector(context, request, response); }));}
    void SetMessageAllocatorFor_CreateVector(
        ::grpc::MessageAllocator< ::CreateVectorRequest, ::CreateVectorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CreateVectorRequest, ::CreateVectorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVector(::grpc::ServerContext* /*context*/, const ::CreateVectorRequest* /*request*/, ::CreateVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateVector(
      ::grpc::CallbackServerContext* /*context*/, const ::CreateVectorRequest* /*request*/, ::CreateVectorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SearchVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SearchVector() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::SearchVectorRequest, ::SearchVectorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SearchVectorRequest* request, ::SearchVectorResponse* response) { return this->SearchVector(context, request, response); }));}
    void SetMessageAllocatorFor_SearchVector(
        ::grpc::MessageAllocator< ::SearchVectorRequest, ::SearchVectorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SearchVectorRequest, ::SearchVectorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SearchVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchVector(::grpc::ServerContext* /*context*/, const ::SearchVectorRequest* /*request*/, ::SearchVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchVector(
      ::grpc::CallbackServerContext* /*context*/, const ::SearchVectorRequest* /*request*/, ::SearchVectorResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateVector<WithCallbackMethod_SearchVector<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateVector() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVector(::grpc::ServerContext* /*context*/, const ::CreateVectorRequest* /*request*/, ::CreateVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchVector() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SearchVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchVector(::grpc::ServerContext* /*context*/, const ::SearchVectorRequest* /*request*/, ::SearchVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateVector() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVector(::grpc::ServerContext* /*context*/, const ::CreateVectorRequest* /*request*/, ::CreateVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateVector(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchVector() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SearchVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchVector(::grpc::ServerContext* /*context*/, const ::SearchVectorRequest* /*request*/, ::SearchVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchVector(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateVector() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateVector(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVector(::grpc::ServerContext* /*context*/, const ::CreateVectorRequest* /*request*/, ::CreateVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateVector(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SearchVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SearchVector() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SearchVector(context, request, response); }));
    }
    ~WithRawCallbackMethod_SearchVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchVector(::grpc::ServerContext* /*context*/, const ::SearchVectorRequest* /*request*/, ::SearchVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchVector(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateVector() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CreateVectorRequest, ::CreateVectorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CreateVectorRequest, ::CreateVectorResponse>* streamer) {
                       return this->StreamedCreateVector(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateVector(::grpc::ServerContext* /*context*/, const ::CreateVectorRequest* /*request*/, ::CreateVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateVector(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CreateVectorRequest,::CreateVectorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SearchVector() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SearchVectorRequest, ::SearchVectorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::SearchVectorRequest, ::SearchVectorResponse>* streamer) {
                       return this->StreamedSearchVector(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SearchVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchVector(::grpc::ServerContext* /*context*/, const ::SearchVectorRequest* /*request*/, ::SearchVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchVector(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SearchVectorRequest,::SearchVectorResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateVector<WithStreamedUnaryMethod_SearchVector<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateVector<WithStreamedUnaryMethod_SearchVector<Service > > StreamedService;
};


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_viperdb_2eproto__INCLUDED
