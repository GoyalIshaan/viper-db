// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: viperdb.proto

#include "viperdb.pb.h"
#include "viperdb.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

static const char* ViperDB_method_names[] = {
  "/ViperDB/CreateVector",
  "/ViperDB/SearchVector",
};

std::unique_ptr< ViperDB::Stub> ViperDB::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ViperDB::Stub> stub(new ViperDB::Stub(channel, options));
  return stub;
}

ViperDB::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateVector_(ViperDB_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchVector_(ViperDB_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ViperDB::Stub::CreateVector(::grpc::ClientContext* context, const ::CreateVectorRequest& request, ::CreateVectorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CreateVectorRequest, ::CreateVectorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateVector_, context, request, response);
}

void ViperDB::Stub::async::CreateVector(::grpc::ClientContext* context, const ::CreateVectorRequest* request, ::CreateVectorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CreateVectorRequest, ::CreateVectorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateVector_, context, request, response, std::move(f));
}

void ViperDB::Stub::async::CreateVector(::grpc::ClientContext* context, const ::CreateVectorRequest* request, ::CreateVectorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateVector_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CreateVectorResponse>* ViperDB::Stub::PrepareAsyncCreateVectorRaw(::grpc::ClientContext* context, const ::CreateVectorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CreateVectorResponse, ::CreateVectorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateVector_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CreateVectorResponse>* ViperDB::Stub::AsyncCreateVectorRaw(::grpc::ClientContext* context, const ::CreateVectorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateVectorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ViperDB::Stub::SearchVector(::grpc::ClientContext* context, const ::SearchVectorRequest& request, ::SearchVectorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SearchVectorRequest, ::SearchVectorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchVector_, context, request, response);
}

void ViperDB::Stub::async::SearchVector(::grpc::ClientContext* context, const ::SearchVectorRequest* request, ::SearchVectorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SearchVectorRequest, ::SearchVectorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchVector_, context, request, response, std::move(f));
}

void ViperDB::Stub::async::SearchVector(::grpc::ClientContext* context, const ::SearchVectorRequest* request, ::SearchVectorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchVector_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SearchVectorResponse>* ViperDB::Stub::PrepareAsyncSearchVectorRaw(::grpc::ClientContext* context, const ::SearchVectorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SearchVectorResponse, ::SearchVectorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchVector_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SearchVectorResponse>* ViperDB::Stub::AsyncSearchVectorRaw(::grpc::ClientContext* context, const ::SearchVectorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchVectorRaw(context, request, cq);
  result->StartCall();
  return result;
}

ViperDB::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ViperDB_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ViperDB::Service, ::CreateVectorRequest, ::CreateVectorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ViperDB::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CreateVectorRequest* req,
             ::CreateVectorResponse* resp) {
               return service->CreateVector(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ViperDB_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ViperDB::Service, ::SearchVectorRequest, ::SearchVectorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ViperDB::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SearchVectorRequest* req,
             ::SearchVectorResponse* resp) {
               return service->SearchVector(ctx, req, resp);
             }, this)));
}

ViperDB::Service::~Service() {
}

::grpc::Status ViperDB::Service::CreateVector(::grpc::ServerContext* context, const ::CreateVectorRequest* request, ::CreateVectorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ViperDB::Service::SearchVector(::grpc::ServerContext* context, const ::SearchVectorRequest* request, ::SearchVectorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


