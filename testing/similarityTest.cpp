#include "../utils/similarity.h"
#include <cstdint>
#include <gtest/gtest.h>
#include <cmath>
#include <random>

class SimilarityCalculationTest : public ::testing::Test {
    protected:
        SimilarityCalculationTest()  {
            std::random_device rd;
            std::mt19937 gen(rd());
            std::uniform_int_distribution<> distrib(1, 100);

            totalVectors = distrib(gen);
            vectorList = new float*[totalVectors];

            std::uniform_real_distribution<float> distrib_float(0.0f, 5.0f);
            for (int i = 0; i < totalVectors; i++) {
                vectorList[i] = new float[128];
                for (int j = 0; j < 128; ++j) {
                    vectorList[i][j] = distrib_float(gen);
                }
            }
        }
        ~SimilarityCalculationTest() {
            for (uint32_t i = 0; i < totalVectors; i++) {
                delete[] vectorList[i];
            }
            delete[] vectorList;
        }
    float** vectorList;
    const float storedVector1[128] = {0.3215588,0.06310406,0.7157699,0.6189627,0.5236684,0.627691,0.18851787,0.8812187,0.46510535,0.35640728,0.9861922,0.23032112,0.95749533,0.44885632,0.66333157,0.15333652,0.07357369,0.16485938,0.0941649,0.7055549,0.019239116,0.46547103,0.33123466,0.24430186,0.059026673,0.91702366,0.82663405,0.15803196,0.78262585,0.75530577,0.31438154,0.7765444,0.85285676,0.20433149,0.88459283,0.8624078,0.50814575,0.6549486,0.38258615,0.28445998,0.35083747,0.08183024,0.91245294,0.01278571,0.17643799,0.701811,0.9736244,0.7118287,0.18935369,0.4972111,0.2856423,0.39637813,0.15184736,0.2549606,0.43166652,0.7607261,0.7367518,0.7086038,0.932229,0.5530676,0.97435284,0.43815762,0.27954695,0.69691896,0.43138003,0.47089684,0.07080674,0.098352395,0.20204027,0.55277735,0.18443558,0.67132306,0.9415642,0.82519776,0.659235,0.3782042,0.9407993,0.6891096,0.71490985,0.73516685,0.5834584,0.07371173,0.318144,0.014840995,0.037642088,0.7346522,0.7007209,0.70639867,0.49522096,0.7622669,0.022841606,0.53724587,0.28309077,0.94111276,0.69921714,0.7164359,0.6074408,0.97739875,0.42626104,0.37059048,0.4610307,0.6244865,0.69099957,0.9819052,0.009840884,0.06765844,0.13225059,0.24247195,0.106163345,0.735633,0.7054249,0.4557718,0.6854189,0.68491715,0.8194295,0.19469719,0.5080998,0.5803323,0.87160444,0.11852094,0.8833579,0.3674827,0.16443731,0.86469597,0.61529905,0.46264666,0.82416344,0.5065794};
    const float storedVector2[128] = {0.07748469,0.6298342,0.7150252,0.21092589,0.86692524,0.7539269,0.30745238,0.43177298,0.8320221,0.600161,0.8325625,0.32906902,0.13839911,0.35130447,0.64043456,0.75138897,0.27051508,0.02377454,0.41444004,0.52917975,0.84763765,0.8415798,0.6125654,0.72089803,0.2181385,0.14894472,0.8582346,0.2261229,0.010335889,0.64259076,0.8807286,0.95369434,0.13537659,0.25144014,0.9136681,0.10338142,0.71699345,0.89817643,0.24232255,0.35748178,0.9632507,0.5360141,0.8654739,0.23177126,0.8645789,0.58993727,0.8359108,0.43679574,0.024303213,0.78729063,0.064606234,0.4113587,0.012667687,0.71837157,0.6766989,0.37256664,0.5002908,0.21973847,0.41308445,0.7780605,0.27757218,0.74834037,0.9199466,0.15650357,0.85841185,0.56568813,0.032293264,0.15252778,0.5276545,0.24094053,0.45347247,0.6408021,0.18036142,0.44584474,0.34584287,0.95660573,0.78925914,0.46080777,0.6533833,0.6181966,0.84764886,0.28756967,0.46299544,0.66434383,0.7726999,0.42619854,0.85365474,0.83420867,0.1825175,0.2823271,0.15303041,0.42088613,0.36935228,0.31726864,0.6929616,0.31972632,0.41917473,0.43728864,0.48872527,0.1374079,0.44275656,0.3619819,0.83622277,0.25782895,0.1051616,0.36988023,0.9956523,0.26608476,0.80145687,0.19087735,0.40154654,0.4397882,0.76142544,0.5080381,0.6621848,0.457738,0.7728867,0.052729003,0.96695215,0.76673096,0.9781393,0.6572362,0.5325398,0.37508896,0.690633,0.86290103,0.24867539,0.9040113};
    uint32_t totalVectors;
};

TEST_F(SimilarityCalculationTest, CosineSimilarityCalculationTest) {
    const float expectedSim = 0.7855449376603105;

    float computedSim = cosine_similarity(storedVector1, storedVector2);
    EXPECT_NEAR(computedSim, expectedSim, 1e-6f)
    <<"Expected : " << computedSim << " , Actual : " << expectedSim;
    std::cout <<"Expected : " << computedSim << " , Actual : " << expectedSim << std::endl;
};